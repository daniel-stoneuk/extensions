export namespace ToothFairy {
  // Default Application
  export interface Application {}
  // Class
  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  // MODIFIED: Added ReadWrite

  export interface ReadWrite<T> {
    (): T;
    set: (value: T) => void;
  }

  /**
   * A Bluetooth device.
   */
  export interface Device {
    /**
     * The name of the device throughout macOS.
     */
    name(): string;
    /**
     * The ToothFairy-specific identifier.
     */
    id(): number;
    address(): string;
    /**
     * Is the device connected or disconnected?
     */
    connected: ReadWrite<boolean>;
    connectionScript(): string;
    disconnectionScript(): string;
    /**
     * The icon selected for this device.
     */
    iconName(): string;
    /**
     * The icon, showing the current connection status and battery level (if applicable).
     */
    iconData(): any;
    disconnectedIconData(): any;
    connectedIconData(): any;
    /**
     * The percentage of battery charge.
     */
    batteryLevel(): number;
    batteryLevelString(): string;
    status(): string;
  }

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  /**
   * The application's top-level scripting object.
   */
  export interface Application {
    /**
     * The name of the application.
     */
    name(): string;
    /**
     * Is this the frontmost (active) application?
     */
    frontmost(): boolean;
    /**
     * The version of the application.
     */
    version(): string;
  }

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  /**
   * A document.
   */
  export interface Document {
    /**
     * The document's name.
     */
    name(): string;
    /**
     * Has the document been modified since the last save?
     */
    modified(): boolean;
    /**
     * The document's location on disk.
     */
    file(): any;
  }

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  /**
   * A window.
   */
  export interface Window {
    /**
     * The full title of the window.
     */
    name(): string;
    /**
     * The unique identifier of the window.
     */
    id(): number;
    /**
     * The index of the window, ordered front to back.
     */
    index(): number;
    /**
     * The bounding rectangle of the window.
     */
    bounds(): any;
    /**
     * Whether the window has a close box.
     */
    closeable(): boolean;
    /**
     * Whether the window can be minimized.
     */
    minimizable(): boolean;
    /**
     * Whether the window is currently minimized.
     */
    minimized(): boolean;
    /**
     * Whether the window can be resized.
     */
    resizable(): boolean;
    /**
     * Whether the window is currently visible.
     */
    visible(): boolean;
    /**
     * Whether the window can be zoomed.
     */
    zoomable(): boolean;
    /**
     * Whether the window is currently zoomed.
     */
    zoomed(): boolean;
    /**
     * The document whose contents are being displayed in the window.
     */
    document(): any;
  }

  // CLass Extension

  // Records
  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  export interface PrintSettings {
    /**
     * the number of copies of a document to be printed
     */
    copies(): number;
    /**
     * Should printed copies be collated?
     */
    collating(): boolean;
    /**
     * the first page of the document to be printed
     */
    startingPage(): number;
    /**
     * the last page of the document to be printed
     */
    endingPage(): number;
    /**
     * number of logical pages laid across a physical page
     */
    pagesAcross(): number;
    /**
     * number of logical pages laid out down a physical page
     */
    pagesDown(): number;
    /**
     * how errors are handled
     */
    errorHandling(): any;
    /**
     * for fax number
     */
    faxNumber(): string;
    /**
     * for target printer
     */
    targetPrinter(): string;
  }

  // Function options

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  export interface PrintOptionalParameter {
    /**
     * The print settings to use.
     */
    withProperties?: any;
    /**
     * Should the application show the print dialog?
     */
    printDialog?: boolean;
  }

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  export interface CountOptionalParameter {
    /**
     * The class of objects to be counted.
     */
    each?: any;
  }

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  export interface DuplicateOptionalParameter {
    /**
     * The location for the new object(s).
     */
    to?: any;
    /**
     * Properties to be set in the new duplicated object(s).
     */
    withProperties?: any;
  }

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  export interface MakeOptionalParameter {
    /**
     * The class of the new object.
     */
    new: any;
    /**
     * The location at which to insert the object.
     */
    at?: any;
    /**
     * The initial contents of the object.
     */
    withContents?: any;
    /**
     * The initial values for properties of the object.
     */
    withProperties?: any;
  }

  /**
   * This file was automatically generated by json-schema-to-typescript.
   * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
   * and run json-schema-to-typescript to regenerate this file.
   */

  export interface MoveOptionalParameter {
    /**
     * The new location for the object(s).
     */
    to: any;
  }
}
export interface ToothFairy extends ToothFairy.Application {
  // Functions

  /**
   * Open a document.
   * @param directParameter the file(s) to open
   *
   */
  open(directParameter: {}): void;

  /**
   * Close a document.
   * @param directParameter the document(s) or window(s) to close.
   *
   */
  close(directParameter: any): void;

  /**
   * Save a document.
   * @param directParameter The document(s) or window(s) to save.
   *
   */
  save(directParameter: any): void;

  /**
      * Print a document.

      * @param option
      * 
      */
  print(option?: ToothFairy.PrintOptionalParameter): void;

  /**
      * Quit the application.

      * 
      */
  quit(): void;

  /**
   * Return the number of elements of a particular class within an object.
   * @param directParameter the object whose elements are to be counted
   * @param option
   * @return the number of elements
   */
  count(directParameter: any, option?: ToothFairy.CountOptionalParameter): number;

  /**
   * Delete an object.
   * @param directParameter the object to delete
   *
   */
  delete(directParameter: any): void;

  /**
   * Copy object(s) and put the copies at a new location.
   * @param directParameter the object(s) to duplicate
   * @param option
   * @return to the duplicated object(s)
   */
  duplicate(directParameter: any, option?: ToothFairy.DuplicateOptionalParameter): any;

  /**
   * Verify if an object exists.
   * @param directParameter the object in question
   * @return true if it exists, false if not
   */
  exists(directParameter: any): boolean;

  /**
      * Make a new object.

      * @param option
      * @return to the new object
      */
  make(option?: ToothFairy.MakeOptionalParameter): any;

  /**
   * Move object(s) to a new location.
   * @param directParameter the object(s) to move
   * @param option
   * @return to the moved object(s)
   */
  move(directParameter: any, option?: ToothFairy.MoveOptionalParameter): any;

  /**
   * Open a x-toothfairy:// URL
   * @param directParameter the URL to open
   *
   */
  getUrl(directParameter: string): void;
}
